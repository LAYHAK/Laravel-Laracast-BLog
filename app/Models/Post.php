<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class Post extends Model
{
    use HasFactory;

    protected $fillable = ['title', 'excerpt', 'body', 'slug', 'published_at', 'category_id'];

    protected $with = ['category', 'author'];

    public function scopeFilter($query, array $filters): void
    {
        // query builder create by laravel automatic when the fuction is call
        //        if ($filters['search'] ?? false) {
        //            $query
        //                ->where('title', 'like', '%'.request('search').'%')
        //                ->orWhere('body', 'like', '%'.request('search').'%')
        //                ->orWhere('excerpt', 'like', '%'.request('search').'%')
        //                ->orWhereHas('category', function ($query) {
        //                    $query->where('name', 'like', '%'.request('search').'%');
        //                })
        //                ->orWhereHas('author', function ($query) {
        //                    $query->where('username', 'like', '%'.request('search').'%');
        //                });
        //        }
        //CLeaner way
        $query->when($filters['search'] ?? false, fn ($query, $search) => $query
            ->where('title', 'like', '%'.$search.'%')
            ->orWhere('body', 'like', '%'.$search.'%')
            ->orWhere('excerpt', 'like', '%'.$search.'%')
            ->orWhereHas('category', function ($query) {
                $query->where('name', 'like', '%'.request('search').'%');
            })
            ->orWhereHas('author', function ($query) {
                $query->where('username', 'like', '%'.request('search').'%');
            })
        );
        $query->when($filters['category'] ?? false, fn ($query, $category) => $query
            ->whereHas('category', fn ($query) => $query->where('slug', $category))
            //? this is the same as above
            //            ->whereExists(fn ($query) => $query
            //                ->from('categories')
            //                ->whereColumn('categories.id', 'posts.category_id')
            //                ->where('categories.slug', $category)
            //            )

        );
        $query->when($filters['author'] ?? false, fn ($query, $author) => $query
            ->whereHas('author', fn ($query) => $query->where('username', $author))
        );
    }

    public function getRouteKeyName(): string
    {
        //? use this when the route parameter doesn't include {param:fieldName}
        return 'slug'; // TODO: Change the autogenerated stub
    }

    public function category(): BelongsTo
    {
        return $this->belongsTo(Category::class);
    }

    public function author(): BelongsTo
    {
        return $this->belongsTo(User::class, 'user_id'); // TODO: Change the autogenerated stub
    }
}
